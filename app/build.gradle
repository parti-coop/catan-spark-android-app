apply plugin: 'com.android.application'
check.dependsOn 'assembleDebugAndroidTest'
apply plugin: 'io.fabric'

android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "xyz.parti.catan"
        minSdkVersion 14
        targetSdkVersion 26
        versionCode 2
        versionName "0.0.2"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile file("parti.keystore")
            storePassword "8b7i9hIv07728698"
            keyAlias "parti"
            keyPassword "5E1b2PNn72862013"
        }
    }

    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def debug_api_base_url = properties.getProperty('debug.api.base.url')
    def debug_api_base_url_regx = properties.getProperty('debug.api.base.url.regx')

    buildTypes {
        def var_api_base_url = "API_BASE_URL"
        def var_is_debug = "IS_DEBUG"
        def var_api_base_url_regx = "API_BASE_URL_REGX"

        debug {
            buildConfigField "boolean", var_is_debug, "true"
            buildConfigField "String", var_api_base_url, ( '"' + debug_api_base_url + '"' ?: "\"http://parti.test/\"" )
            buildConfigField "String", var_api_base_url_regx, ( '"' + debug_api_base_url_regx + '"' ?: "\"^https:\\\\/\\\\/(.*\\\\.)?parti\\\\.test(\$|\\\\/)\"" )
        }
        release {
            buildConfigField "boolean", var_is_debug, "false"
            buildConfigField "String", var_api_base_url, "\"https://parti.xyz\""
            buildConfigField "String", var_api_base_url_regx, "\"^https:\\\\/\\\\/(.*\\\\.)?parti\\\\.xyz(\$|\\\\/)\""
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def newName = output.outputFile.name.replace("app", "catan2");
            newName = newName.replace(".apk", "-${variant.versionName}.apk")
            outputFileName = file("/" + newName)
        }
    }

    lintOptions {
        abortOnError false
    }
}

configurations.all {
    resolutionStrategy.force 'com.android.support:support-annotations:26.1.0'
}

repositories {
    maven { url 'https://maven.google.com' }
    maven { url 'https://maven.fabric.io/public' }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:design:26.1.0'

    compile 'com.google.firebase:firebase-messaging:11.8.0'
    compile 'com.firebase:firebase-jobdispatcher:0.6.0'

    compile('com.crashlytics.sdk.android:crashlytics:2.8.0@aar') {
        transitive = true;
    }

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}

apply plugin: 'com.google.gms.google-services'
